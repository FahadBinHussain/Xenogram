// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  familyTrees   FamilyTree[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Family Tree Models
model FamilyTree {
  id          String       @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  members     FamilyMember[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model FamilyMember {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  birthDate    DateTime?
  deathDate    DateTime?
  gender       Gender
  bio          String?   @db.Text
  photoUrl     String?
  birthPlace   String?
  deathPlace   String?
  familyTreeId String
  familyTree   FamilyTree @relation(fields: [familyTreeId], references: [id], onDelete: Cascade)
  
  // Relationships
  parentsRelationships   Relationship[] @relation("Parent")
  childrenRelationships  Relationship[] @relation("Child")
  
  // Marriages/Partnerships
  partnerRelationshipsAs1 Partnership[] @relation("Partner1")
  partnerRelationshipsAs2 Partnership[] @relation("Partner2")
  
  // Events
  events       MemberEvent[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

// Parent-child relationship
model Relationship {
  id         String       @id @default(cuid())
  parentId   String
  childId    String
  type       RelationType
  parent     FamilyMember @relation("Parent", fields: [parentId], references: [id], onDelete: Cascade)
  child      FamilyMember @relation("Child", fields: [childId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([parentId, childId])
}

enum RelationType {
  BIOLOGICAL
  ADOPTED
  FOSTER
  STEP
  OTHER
}

// Marriage/Partnership model
model Partnership {
  id         String       @id @default(cuid())
  partner1Id String
  partner2Id String
  type       PartnershipType
  startDate  DateTime?
  endDate    DateTime?
  place      String?
  notes      String?      @db.Text
  partner1   FamilyMember @relation("Partner1", fields: [partner1Id], references: [id], onDelete: Cascade)
  partner2   FamilyMember @relation("Partner2", fields: [partner2Id], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([partner1Id, partner2Id])
}

enum PartnershipType {
  MARRIAGE
  DOMESTIC_PARTNERSHIP
  ENGAGEMENT
  RELATIONSHIP
  DIVORCED
  SEPARATED
  OTHER
}

// Life events for family members
model MemberEvent {
  id             String       @id @default(cuid())
  familyMemberId String
  familyMember   FamilyMember @relation(fields: [familyMemberId], references: [id], onDelete: Cascade)
  type           EventType
  date           DateTime?
  place          String?
  description    String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum EventType {
  BIRTH
  DEATH
  MARRIAGE
  DIVORCE
  GRADUATION
  CAREER
  MOVE
  MEDICAL
  OTHER
} 